# This file and its contents are licensed under the Apache License 2.0.
# Please see the included NOTICE for copyright information and LICENSE for a copy of the license.

image:
  repository: quay.io/prometheuscommunity/avalanche
  tag: main
  pullPolicy: IfNotPresent

# number of connector pods to spawn
replicaCount: 1

# Arguments that will be passed onto deployment pods
# The list of available cli flags can be found by
# running avalanche --help
extraArgs: []

# Annotations to be added to the avalanche Deployment
annotations: {}

# Annotations to be added to the avalanche Pods
podAnnotations: {}

# Enable ServiceMonitor used by prometheus-operator to configure prometheus for metrics scraping.
# Note that by enabling the service monitor, the cluster's Prometheus will start scraping the metrics
# generated as load and intended for benchmarking.
serviceMonitor:
  enabled: false

# settings for the service to be created that will expose
# the avalanche deployment
service:
  type: "ClusterIP"
  annotations: {}
  port: 9001
  # properties to be added to service.spec
  spec: {}

# create and attach a service account
serviceAccount:
  create: true
  # name: custom-name

# set your own limits
resources: {}

# set a custom readiness probe e.g. when basic auth is enabled
# readinessProbe:
#   httpGet: null
#   exec:
#     command:
#     - sh
#     - -c
#     - |-
#       status_code=$(wget --server-response "http://${WEB_AUTH_USERNAME}:${WEB_AUTH_PASSWORD}@localhost:9001/health" 2>&1 | awk '/^  HTTP/{print $2}');
#       if [[ "${status_code}" == "200" ]]; then exit 0; else exit 1; fi
# NOTE: This readinessProbe will fail when remote_write is used, as avalanche
# does not enable the healthcheck endpoint when remote write is used instead
# of the /metrics endpoint.
readinessProbe:
  httpGet:
    path: /health
    port: metrics
    scheme: HTTP
  failureThreshold: 3
  timeoutSeconds: 15
  periodSeconds: 15
